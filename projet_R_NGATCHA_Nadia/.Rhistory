sen_polyg = getData("GADM", country= "senegal", level = 2)
color_q25<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color_q25(q25),
radius = 3,
color = ifelse(projet_map$q25), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_q25,
title="niveau d'instruction",values=projet_map$q25)
sen_polyg = getData("GADM", country= "senegal", level = 2)
color_m2<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color_m2(q25),
radius = 3,
color = ifelse(projet_map$q25), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_q25,
title="niveau d'instruction",values=projet_map$q25)
sen_polyg = getData("GADM", country= "senegal", level = 2)
color_q25<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color_q25(q25),
radius = 3,
color = ifelse(projet_map$q25), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_q25,
title="niveau d'instruction",values=projet_map$q25)
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
color = ifelse(projet_map$q25), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
m1
library(tidyverse)
library(dplyr)
library(gtsummary)
library(knitr)
library(tinytex)
library(readxl)
library(naniar)
library(sf)
library(gt)
library(leaflet)
library(raster)
library(rnaturalearth)
library(htmlwidgets)
library(webshot)
knitr::opts_chunk$set(echo = TRUE)
sen_polyg = getData("GADM", country= "senegal", level = 2)
m1=leaflet(sen_polyg) %>% addPolygons(data = sen_polyg) %>%
addCircleMarkers(
data=projet_map,
radius = 5,
color = ~c(q25 == "Aucun niveau", "black","niveau primaire", "red"), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.7,
popup = ~paste("Sexe:", sexe)
)
m1
library(tidyverse)
library(dplyr)
library(gtsummary)
library(knitr)
library(tinytex)
library(readxl)
library(naniar)
library(sf)
library(gt)
library(leaflet)
library(raster)
library(rnaturalearth)
library(htmlwidgets)
library(webshot)
knitr::opts_chunk$set(echo = TRUE)
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","pink"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
m1
library(shiny); runApp('app (2).R')
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
m1
data_miss=miss_var_summary(projet)
kable(head(data_miss))#
data_miss=miss_var_summary(projet)
kables(head(data_miss))#
data_miss=miss_var_summary(projet)
kable(head(data_miss))#
data_miss=miss_var_summary(projet)
kable(data_miss)#
data_miss=miss_var_summary(projet)
kable(head(data_miss))#
data_miss=miss_var_summary(projet)
kable(data_miss)#
langues<-projet %>% dplyr::select(key,starts_with("q24a_"))
kable(head(langues))
projetN<- read_excel("Base_Partie 2.xlsx",
range=NULL,
col_names = TRUE,
col_types = NULL,
)
projetN2<- read_excel("Base_Partie 2.xlsx",sheet="district")
fusion <- merge(projetN, projetN2, by = "district", all.x = TRUE)
#revoir le nom fusion
data_miss=miss_var_summary(projet)
kable(head(data_miss))#
knitr::opts_chunk$set(echo = TRUE)
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 2)
color_sexe<-colorFactor(c("red","black"),domain=projet_map$sexe)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(
data=projet_map,
radius = 3,
color = ifelse(projet_map$sexe == "Homme", "black", "red"), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
popup = ifelse(projet_map$sexe == "Homme", "Homme", "Femme")
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_sexe,
title="Sexe",values=projet_map$sexe)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="Sexe.html")
webshot("Sexe.html","Sexe.png")
sen_polyg = getData("GADM", country= "senegal", level = 2)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 1)
color_sexe<-colorFactor(c("red","black"),domain=projet_map$sexe)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(
data=projet_map,
radius = 3,
color = ifelse(projet_map$sexe == "Homme", "black", "red"), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
popup = ifelse(projet_map$sexe == "Homme", "Homme", "Femme")
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_sexe,
title="Sexe",values=projet_map$sexe)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="Sexe.html")
webshot("Sexe.html","Sexe.png")
sen_polyg = getData("GADM", country= "senegal", level = 2)
color_sexe<-colorFactor(c("red","black"),domain=projet_map$sexe)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(
data=projet_map,
radius = 3,
color = ifelse(projet_map$sexe == "Homme", "black", "red"), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
popup = ifelse(projet_map$sexe == "Homme", "Homme", "Femme")
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_sexe,
title="Sexe",values=projet_map$sexe)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="Sexe.html")
webshot("Sexe.html","Sexe.png")
sen_polyg = getData("GADM", country= "senegal", level = 1)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 1)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 4,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 1)
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 4,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m1,file="q25.html")
webshot("q25.html","q25.png")
sen_polyg = getData("GADM", country= "senegal", level = 1)
color_sexe<-colorFactor(c("red","black"),domain=projet_map$sexe)
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(
data=projet_map,
radius = 3,
color = ifelse(projet_map$sexe == "Homme", "black", "red"), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
popup = ifelse(projet_map$sexe == "Homme", "Homme", "Femme")
) %>%
addLegend(position="bottomright",
pal=color_sexe,
title="Sexe",values=projet_map$sexe)
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="Sexe.html")
webshot("Sexe.html","Sexe.png")
library(shiny); runApp('~/shiny_appl.R')
library(tidyverse)
library(dplyr)
library(gtsummary)
library(knitr)
library(tinytex)
library(readxl)
library(naniar)
library(sf)
library(gt)
library(leaflet)
library(raster)
library(rnaturalearth)
library(htmlwidgets)
library(webshot)
library(parameters)
library(broom)
knitr::opts_chunk$set(echo = TRUE)
projet<- read_excel("Base_Partie 1.xlsx",
range=NULL,
col_names = TRUE,
col_types = NULL,
) #la base de donnée étant sous l'extension xlsx, la fonction read_excel du package readxl est la mieux adapter pour son importation.
data_miss=miss_var_summary(projet)
kable(head(data_miss))#donne l'entete du tableau contenant les différentes valeurs manquantes ,le nombre de valeur manquantes qu'elles contiennent et le pourcentage de ses valeurs parmi le NA de la base.
has_missing <- any(is.na(projet$key))# vérifie si la variable key contient des valeurs NA
# Affichage du résultat
if (has_missing) {
print("Il y a des valeurs manquantes pour la variable 'key'.")
} else {
print("Il n'y a pas de valeur manquante pour la variable 'key'.")
}
projet<- projet %>% dplyr::rename(region= q1, departement=q2, sexe=q23) #"%>%" permet de chaîner des opérations de transformation de données en passant le résultat d'une étape à la suivante.
projet <- projet %>%
mutate(sexe_2 = if_else(sexe=="Femme",1,0))# Mutate permet l'ajout de la colonne sexe_2 au data frame projet
langues<-projet %>% dplyr::select(key,starts_with("q24a_"))
projet%>%
dplyr::select(sexe,q25,q12,q81)%>%
gtsummary::tbl_summary(
by=sexe,
label=list(q25~"Niveau d'instruction",
q12~"statut Juridique",
q81~"propriétaire/locataire"
),
statistic = list(all_categorical()~ "{n}%"),
missing="always",
missing_text="Missing",
percent="column"
)%>%
add_overall()%>%
bold_labels()
projet_map<- st_as_sf(projet, coords = c("gps_menlongitude", "gps_menlatitude"),crs = 4326)
class(projet_map)# projet_map n'est rien d'autre que le data frame projet au quel on a ajouter les coordonnées géographique des PME.
sen_polyg = getData("GADM", country= "senegal", level = 1)#télechargement des donnés géospatiales du Sénégal
color_sexe<-colorFactor(c("red","black"),domain=projet_map$sexe)# couleur réprésentative du genre de chaque chef des PME sur la carte
#création d'une carte interactive
m<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 2, #ajouter un polygone sur la carte
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(
data=projet_map,
radius = 3,
color = ifelse(projet_map$sexe == "Homme", "black", "red"), # Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
popup = ifelse(projet_map$sexe == "Homme", "Homme", "Femme")
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color_sexe,
title="Sexe",values=projet_map$sexe) # ajouter une légende sur la carte
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m,file="Sexe.html")
webshot("Sexe.html","Sexe.png")
sen_polyg = getData("GADM", country= "senegal", level = 1)
#Definition d'un jeu de 4 couleurs qui représentera chaque niveau scolaire.
color<-colorFactor(c("red","black","yellow","green"),domain=projet_map$q25)
#Création d'une carte interactive
m1<-leaflet(sen_polyg) %>% addPolygons(data = sen_polyg,
color = "black",weight = 4,
opacity = 0.5,
fillColor = "white",
fillOpacity = 0.1) %>%
addCircleMarkers(data=projet_map,color=~color(q25),
radius = 3,
# Utilisation de couleurs différentes selon le sexe
fillOpacity = 0.5,
) %>%
addTiles() %>%
addLegend(position="bottomright",
pal=color,
title="niveau d'instruction",values=projet_map$q25)# positionnement de la légende à droite
# Etant donné que le graphes est interactif il faut faire la capture d'écran
saveWidget(m1,file="q25.html")
webshot("q25.html","q25.png")
projetN<- read_excel("Base_Partie 2.xlsx",
range=NULL,
col_names = TRUE,
col_types = NULL,
)
projetN<- projetN %>% dplyr::rename(destination= country_destination)
#filtrage de toutes les valeurs négatives du data frame projet et leur remplacement par les NA supprimant ainsi les valeurs négatives de la base.
projetN[projetN < 0] <- NA
View(projetN)
View(projetN)
